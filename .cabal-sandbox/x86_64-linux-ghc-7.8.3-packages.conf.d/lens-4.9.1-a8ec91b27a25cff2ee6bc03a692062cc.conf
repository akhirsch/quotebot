name: lens
version: 4.9.1
id: lens-4.9.1-a8ec91b27a25cff2ee6bc03a692062cc
license: BSD3
copyright: Copyright (C) 2012-2015 Edward A. Kmett
maintainer: Edward A. Kmett <ekmett@gmail.com>
stability: provisional
homepage: http://github.com/ekmett/lens/
package-url:
synopsis: Lenses, Folds and Traversals
description: This package comes \"Batteries Included\" with many useful lenses for the types
             commonly used from the Haskell Platform, and with tools for automatically
             generating lenses and isomorphisms for user-supplied data types.
             .
             The combinators in @Control.Lens@ provide a highly generic toolbox for composing
             families of getters, folds, isomorphisms, traversals, setters and lenses and their
             indexed variants.
             .
             An overview, with a large number of examples can be found in the <https://github.com/ekmett/lens#lens-lenses-folds-and-traversals README>.
             .
             An introductory video on the style of code used in this library by Simon Peyton Jones is available from <http://skillsmatter.com/podcast/scala/lenses-compositional-data-access-and-manipulation Skills Matter>.
             .
             A video on how to use lenses and how they are constructed is available on <http://youtu.be/cefnmjtAolY?hd=1 youtube>.
             .
             Slides for that second talk can be obtained from <http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf comonad.com>.
             .
             More information on the care and feeding of lenses, including a brief tutorial and motivation
             for their types can be found on the <https://github.com/ekmett/lens/wiki lens wiki>.
             .
             A small game of @pong@ and other more complex examples that manage their state using lenses can be found in the <https://github.com/ekmett/lens/blob/master/examples/ example folder>.
             .
             /Lenses, Folds and Traversals/
             .
             With some signatures simplified, the core of the hierarchy of lens-like constructions looks like:
             .
             .
             <<http://i.imgur.com/ALlbPRa.png>>
             .
             <Hierarchy.png (Local Copy)>
             .
             You can compose any two elements of the hierarchy above using @(.)@ from the @Prelude@, and you can
             use any element of the hierarchy as any type it linked to above it.
             .
             The result is their lowest upper bound in the hierarchy (or an error if that bound doesn't exist).
             .
             For instance:
             .
             * You can use any 'Traversal' as a 'Fold' or as a 'Setter'.
             .
             * The composition of a 'Traversal' and a 'Getter' yields a 'Fold'.
             .
             /Minimizing Dependencies/
             .
             If you want to provide lenses and traversals for your own types in your own libraries, then you
             can do so without incurring a dependency on this (or any other) lens package at all.
             .
             /e.g./ for a data type:
             .
             > data Foo a = Foo Int Int a
             .
             You can define lenses such as
             .
             > -- bar :: Lens' (Foo a) Int
             > bar :: Functor f => (Int -> f Int) -> Foo a -> f (Foo a)
             > bar f (Foo a b c) = fmap (\a' -> Foo a' b c) (f a)
             .
             > -- quux :: Lens (Foo a) (Foo b) a b
             > quux :: Functor f => (a -> f b) -> Foo a -> f (Foo b)
             > quux f (Foo a b c) = fmap (Foo a b) (f c)
             .
             without the need to use any type that isn't already defined in the @Prelude@.
             .
             And you can define a traversal of multiple fields with 'Control.Applicative.Applicative':
             .
             > -- traverseBarAndBaz :: Traversal' (Foo a) Int
             > traverseBarAndBaz :: Applicative f => (Int -> f Int) -> Foo a -> f (Foo a)
             > traverseBarAndBaz f (Foo a b c) = Foo <$> f a <*> f b <*> pure c
             .
             What is provided in this library is a number of stock lenses and traversals for
             common haskell types, a wide array of combinators for working them, and more
             exotic functionality, (/e.g./ getters, setters, indexed folds, isomorphisms).
category: Data, Lenses, Generics
author: Edward A. Kmett
exposed: True
exposed-modules: Control.Exception.Lens Control.Lens
                 Control.Lens.At Control.Lens.Combinators Control.Lens.Cons
                 Control.Lens.Each Control.Lens.Empty Control.Lens.Equality
                 Control.Lens.Extras Control.Lens.Fold Control.Lens.Getter
                 Control.Lens.Indexed Control.Lens.Internal
                 Control.Lens.Internal.Bazaar Control.Lens.Internal.ByteString
                 Control.Lens.Internal.Coerce Control.Lens.Internal.Context
                 Control.Lens.Internal.Deque Control.Lens.Internal.Exception
                 Control.Lens.Internal.FieldTH Control.Lens.Internal.PrismTH
                 Control.Lens.Internal.Fold Control.Lens.Internal.Getter
                 Control.Lens.Internal.Indexed Control.Lens.Internal.Instances
                 Control.Lens.Internal.Iso Control.Lens.Internal.Level
                 Control.Lens.Internal.List Control.Lens.Internal.Magma
                 Control.Lens.Internal.Prism Control.Lens.Internal.Reflection
                 Control.Lens.Internal.Review Control.Lens.Internal.Setter
                 Control.Lens.Internal.TH Control.Lens.Internal.Zoom
                 Control.Lens.Iso Control.Lens.Lens Control.Lens.Level
                 Control.Lens.Operators Control.Lens.Plated Control.Lens.Prism
                 Control.Lens.Reified Control.Lens.Review Control.Lens.Setter
                 Control.Lens.TH Control.Lens.Traversal Control.Lens.Tuple
                 Control.Lens.Type Control.Lens.Wrapped Control.Lens.Zoom
                 Control.Monad.Error.Lens Control.Parallel.Strategies.Lens
                 Control.Seq.Lens Data.Array.Lens Data.Bits.Lens
                 Data.ByteString.Lens Data.ByteString.Strict.Lens
                 Data.ByteString.Lazy.Lens Data.Complex.Lens Data.Data.Lens
                 Data.Dynamic.Lens Data.HashSet.Lens Data.IntSet.Lens Data.List.Lens
                 Data.Map.Lens Data.Sequence.Lens Data.Set.Lens Data.Text.Lens
                 Data.Text.Strict.Lens Data.Text.Lazy.Lens Data.Tree.Lens
                 Data.Typeable.Lens Data.Vector.Lens Data.Vector.Generic.Lens
                 Generics.Deriving.Lens GHC.Generics.Lens System.Exit.Lens
                 System.FilePath.Lens System.IO.Error.Lens Language.Haskell.TH.Lens
                 Numeric.Lens
hidden-modules: Paths_lens
trusted: False
import-dirs: /home/akh/quotebot/.cabal-sandbox/lib/x86_64-linux-ghc-7.8.3/lens-4.9.1
library-dirs: /home/akh/quotebot/.cabal-sandbox/lib/x86_64-linux-ghc-7.8.3/lens-4.9.1
hs-libraries: HSlens-4.9.1
extra-libraries:
extra-ghci-libraries:
include-dirs:
includes:
depends: array-0.5.0.0-b8a3e03cc1fe2faa719c34f245086f0e
         base-4.7.0.1-1a55ebc8256b39ccbff004d48b3eb834
         bifunctors-4.2-956ed15652c3386f0417631a6f98180c
         bytestring-0.10.4.0-aeb2ba35f192516ed4298f0656cc3a85
         comonad-4.2.2-367a4815963a9aa106405ff7dbd04d55
         containers-0.5.5.1-0d8db9193d3e3371e0142bcc8a4a0721
         contravariant-1.2.0.1-23d1a44b2c568b56815f88eb33e19c63
         distributive-0.4.4-716d4f27f77ddcefb494f54eb15a0a3d
         exceptions-0.8-afe1e676108b1ee7b89145e30c0c4353
         filepath-1.3.0.2-1580a61d3226e4be45fe2130dc2881e3
         free-4.10.0.1-5db2978757becb90ba141ddb6dd46098
         ghc-prim-0.3.1.0-954cb57749cf319beafdc89b3415422c
         hashable-1.2.3.1-b7504949313ebaa254d26e046e4a7f80
         kan-extensions-4.2.2-25f5a6a691a781b9fe6944905f5e9075
         mtl-2.1.3.1-8bcc0591131896cfc8761a93703d4c61
         parallel-3.2.0.4-c330f8c64fe6816637464ee78fcb9a93
         profunctors-4.3.2-11c63b2683ed5fb8a28540efd7e1aeb0
         reflection-1.5.1.1-e0b5fcbd9f71f68ffaa5c3a84fc8c321
         semigroupoids-4.3-ea5b5b1a4d66671dfb6891ff2f3c2739
         semigroups-0.16.1-58f795fbecbddcc9e50d334ab7a6b996
         tagged-0.7.3-576a8b2a1d599d27b0b9ed9b00e28ed6
         template-haskell-2.9.0.0-bde0146477914ef1904ea318a335bb91
         text-1.1.1.3-a601107b01d6d3a7a795ebb94e412f55
         transformers-0.3.0.0-16a97696ae672940f1523b262e566ba5
         transformers-compat-0.4.0.3-198d3ff4c2e217b85e3248e9a11fc486
         unordered-containers-0.2.5.1-234a3c7ab70d6a12fd619fe54a24e4ed
         vector-0.10.9.1-9fb40994bbccba13bd2f3fdb4578048c
         void-0.7-4d1fd6a2d436fac2cb14730b87d7e177
hugs-options:
cc-options:
ld-options:
framework-dirs:
frameworks:
haddock-interfaces: /home/akh/quotebot/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.8.3/lens-4.9.1/html/lens.haddock
haddock-html: /home/akh/quotebot/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.8.3/lens-4.9.1/html
